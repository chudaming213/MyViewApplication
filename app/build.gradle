import java.util.regex.Matcher
import java.util.regex.Pattern

apply plugin: 'com.android.application'

android {
    signingConfigs {
        release {
            keyAlias 'MyView'
            keyPassword 'onon@onon.com'
            storeFile file('./MyKeystore.jks')
            storePassword 'onon@onon.com'
        }
    }
    def versionNameString
    def versionCodeInt
    if (project.hasProperty("versionNameString")) {
        versionNameString = project.getProperties().get("versionNameString")
    } else {
        versionNameString = "1.0.0"
    }
    if (project.hasProperty("versionCodeInt")) {
        def get = project.getProperties().get("versionCodeInt")
        versionCodeInt = isNumeric(get) ? Integer.parseInt(get) : 1
    } else {
        versionCodeInt = 1
    }
    compileSdkVersion 25
    buildToolsVersion "26"
    defaultConfig {
        applicationId "com.onon.test.myviewapplication"
        minSdkVersion 15
        targetSdkVersion 25
        versionCode versionCodeInt
        print(versionCodeInt + "versionNameString==" + versionNameString)
        versionName versionNameString
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        signingConfig signingConfigs.release

        if (project.properties.containsKey("enviroment")) {
            def enviroment = project.getProperties().get("enviroment");
            print("enviroment=="+enviroment)
            if (enviroment != null) {
                if (enviroment.equals("develop"))
                    buildConfigField 'Integer', 'ENVIRONMENTID', '0'
                if (enviroment.equals("test"))
                    buildConfigField 'Integer', 'ENVIRONMENTID', '1'
                if (enviroment.equals("product"))
                    buildConfigField 'Integer', 'ENVIRONMENTID','2'
            } else {
                buildConfigField 'Integer', 'ENVIRONMENTID', '2'
            }
        } else {
            buildConfigField 'Integer', 'ENVIRONMENTID', '2'
        }
        println("ENVIRONMENTID=="+ getBuildConfigFields().get("ENVIRONMENTID"))
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

def isNumeric(String str) {
    Pattern pattern = Pattern.compile('^[-\\+]?[\\d]*$');
    return pattern.matcher(str).matches();
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'com.google.android:flexbox:0.2.6'
    compile 'com.android.support:recyclerview-v7:25.3.1'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile files('libs/nineoldandroids.jar')
}
